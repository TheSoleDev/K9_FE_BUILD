{"version":3,"sources":["components/Header.js","services/PostData.js","components/Home.js","components/Register.js","components/HeroComicDetails.js","components/HeroComicSeries.js","components/HeroList.js","routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","JSON","parse","sessionStorage","getItem","state","userData","isLoggedIn","logout","bind","assertThisInitialized","checkIfLoggedIn","setState","react_default","a","createElement","className","href","onClick","setItem","clear","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","PostData","BaseUrl","console","log","stringify","Promise","resolve","reject","fetch","method","headers","Headers","Content-Type","Access-Control-Allow-Origin","PHP_AUTH_USER","username","PHP_AUTH_PW","password","then","response","json","responseJson","catch","error","body","email","plainPassword","first","second","cpassword","Home","redirect","isLogged","login","onChange","_this2","result","responseJSON","token","e","defineProperty","target","name","value","Redirect","to","components_Header","placeholder","required","Register","register","success","alert","HeroComicDetails","isLoaded","characterComics","selectedComic","redirectToSeries","currentComicId","res","comicId","_this3","metaData","components_HeroComicSeries","currentCharId","data","results","backToSeriesList","map","item","key","src","concat","thumbnail","path","extension","title","issueNumber","pageCount","Date","dates","date","toLocaleDateString","prices","price","HeroComicSeries","user_id","readHistory","readhistory","history","i","length","comic_id","components_HeroComicDetails","checkIfComicAlreadyRead","selectComic","HeroList","characterItems","selectedChar","charId","characters","char_thumbnail","char_name","selectCharacter","char_id","Routes","BrowserRouter","Switch","Route","exact","component","App","index","selected","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.765282de.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Header extends Component {\r\n\r\n\tconstructor(props){\r\n\t    super(props);\r\n\t    let userData = null;\r\n\r\n\t    if(JSON.parse(sessionStorage.getItem('userData'))){\r\n\t      userData = JSON.parse(sessionStorage.getItem('userData'));\r\n\t    }   \r\n\r\n\t    this.state = {\r\n\t        userData: this.userData,\r\n\t        isLoggedIn: false\r\n\t    }\r\n\t    this.logout = this.logout.bind(this);\r\n\t    this.checkIfLoggedIn = this.checkIfLoggedIn.bind(this);\r\n\t}\r\n\r\n\tcomponentWillMount(props){\r\n\t    if(sessionStorage.getItem('userData')){\r\n\t\t    this.setState({\r\n\t\t\t\t\t\t\t        userData: JSON.parse(sessionStorage.getItem('userData')),\r\n\t\t\t\t\t\t\t        isLoggedIn: true\r\n\t\t    });\r\n\t    }\r\n\t}\r\n\r\n\tcheckIfLoggedIn(props){\r\n        if(this.state.userData !== null && typeof this.state.userData !== \"undefined\"){\r\n\t\t\treturn(\r\n\t\t\t\t\t<ul className=\"navbar-nav\">\r\n\t\t                <li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"/\" onClick={this.logout} >Logout</a>\t                    \r\n\t\t                </li>\r\n\t\t            </ul>\r\n\t\t        );\r\n\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t\t\t<ul className=\"navbar-nav\">\r\n\t\t                <li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"/\">Login</a>\t\t                    \r\n\t\t                </li>\r\n\t\t                <li className=\"nav-item\">\r\n\t\t                    <a className=\"nav-link\" href=\"/register\">Register</a>\r\n\t\t                </li>\r\n\t\t            </ul>\r\n\t\t        );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlogout(){\r\n\t\tsessionStorage.setItem('userData','');\r\n\t\tsessionStorage.clear();\r\n\t}\r\n\r\n\trender(){\r\n\t    return (\r\n\t\t\t\t<nav className=\"navbar navbar-expand-lg navbar-light bg-light border-bottom shadow-sm\">\r\n\t\t\t\t  <a className=\"navbar-brand\" href=\"/\">K9 Marvel</a>\r\n\t\t\t\t  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t\t    <span className=\"navbar-toggler-icon\"></span>\r\n\t\t\t\t  </button>\r\n\t\t\t\t  <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarText\">\r\n\t\t\t\t  {this.checkIfLoggedIn()}\r\n\r\n\t\t\t\t  </div>\r\n\t\t\t\t</nav>\r\n\t    );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","export function PostData(type, userData){\r\n\r\n\r\n\tlet BaseUrl = 'http://k9-be.sourcebuckets.com/';\r\n\r\n\tconsole.log(type, JSON.stringify(userData));\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\r\n\t\tif(type == 'users/login'){\r\n\t\t\tfetch(BaseUrl+type,{\r\n\t\t\t\tmethod: 'POST',\r\n\r\n\t\t\t    headers: new Headers({\r\n\t\t\t\t    \"Content-Type\": \"application/json\",\r\n\t\t\t\t    'Access-Control-Allow-Origin': '*',\r\n\t\t\t      'PHP_AUTH_USER':userData.username,\r\n\t\t\t      'PHP_AUTH_PW':userData.password,\r\n\t\t\t    })\r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((responseJson) => {\r\n\t\t\t\tresolve(responseJson);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\treject(error);\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(type == 'users/register'){\r\n\t\t\tfetch(BaseUrl+type,{\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t    headers: new Headers({\r\n\t\t\t\t    \"Content-Type\": \"application/json\",\r\n\t\t\t\t    'Access-Control-Allow-Origin': '*'\r\n\t\t\t    }),\r\n\t\t\t\tbody: JSON.stringify({\"username\":userData.username,\"email\":userData.email,\"plainPassword\":{\"first\":userData.password,\"second\":userData.cpassword}})\t\t\t    \r\n\t\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((responseJson) => {\r\n\t\t\t\tresolve(responseJson);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\treject(error);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport {PostData} from '../services/PostData';\r\nclass Home extends Component {\r\n\r\n  constructor(props){\r\n    let userData = null;\r\n\r\n    if(JSON.parse(sessionStorage.getItem('userData'))){\r\n      userData = JSON.parse(sessionStorage.getItem('userData'));\r\n    }   \r\n       \r\n    super(props);\r\n    this.state = {\r\n        username:'',\r\n        password:'',\r\n        redirect: false,\r\n        isLogged: false,\r\n        userData: userData\r\n    }\r\n    this.login = this.login.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n\r\n  }\r\n\r\n  login(){\r\n    \r\n    if(this.state.username && this.state.password){\r\n      PostData('users/login', this.state).then((result) => {\r\n        let responseJSON = result;\r\n        if(responseJSON.token){\r\n          sessionStorage.setItem('userData', JSON.stringify(responseJSON));\r\n          this.setState({redirect: true});\r\n          this.setState({userData: JSON.parse(sessionStorage.getItem('userData'))});\r\n        }\r\n        else{\r\n          console.log('ERROR');\r\n        }\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange(e){\r\n    this.setState({[e.target.name]: e.target.value});\r\n    \r\n  }\r\n\r\n  render() {\r\n\r\n\r\n\r\n    if(this.state.userData !== null){\r\n      return (<Redirect to={'/herolist'}/>);\r\n    }\r\n\r\n    return (\r\n        \r\n      <div>\r\n        <Header  />      \r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-4 align-self-center\">\r\n\r\n              <div className=\"login_form_container\">\r\n          \r\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n                <div className=\"form-group\">\r\n                  <label className=\"sr-only\">Username</label>\r\n                  <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\" placeholder=\"Username\" required onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label  className=\"sr-only\">Password</label>\r\n                  <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" placeholder=\"Password\" required onChange={this.onChange}/>\r\n                </div>\r\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\" onClick={this.login}>Sign in</button>\r\n            </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport {PostData} from '../services/PostData';\r\n\r\n\r\nclass Register extends Component {\r\n\r\n\tconstructor(props){\r\n\t    super(props);\r\n\t    let userData = null;\r\n\r\n\t    if(JSON.parse(sessionStorage.getItem('userData'))){\r\n\t      userData = JSON.parse(sessionStorage.getItem('userData'));\r\n\t    }   \r\n\r\n\t    this.state = {\r\n\t        username:'',\r\n\t        email:'',\r\n\t        password:'',\r\n\t        cpassword:'',\r\n\t        redirect: false,\r\n\t        isLogged: false,\r\n\t        userData: userData\r\n\t    }\r\n\t    this.register = this.register.bind(this);\r\n\t    this.onChange = this.onChange.bind(this);\r\n\t}\r\n\r\n\tregister(){\r\n\r\n\t\tif(this.state.username && this.state.password && this.state.email){\r\n\t\t  PostData('users/register', this.state).then((result) => {\r\n\t\t    let responseJSON = result;\r\n\t\t    if(responseJSON.success){\r\n\t\t      alert('Thank you for registering. You can now login to your account.');\r\n\t\t      this.setState({redirect: true});\r\n\t\t    }\r\n\t\t    else{\r\n\t\t      console.log('ERROR');\r\n\t\t    }\r\n\r\n\t\t  });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tonChange(e){\r\n\t\tthis.setState({[e.target.name]: e.target.value});\r\n\t\tconsole.log(this.state)\r\n\t}\r\n\r\n  render() {\r\n    if(this.state.userData !== null && typeof this.state.userData !== \"undefined\"){\r\n      return (<Redirect to={'/herolist'}/>);\r\n    }\r\n    if(this.state.redirect){\r\n      return (<Redirect to={'/login'}/>);\r\n    }\r\n    return (\r\n        \r\n\t    <div>\r\n\t        <Header  />      \r\n\t        <div className=\"container\">    \t\r\n\t\t\t      <div className=\"row justify-content-center\">\r\n\t\t\t        <div className=\"col-4 align-self-center\">\r\n\r\n\r\n\t\t\t\t        <div className=\"login_form_container\">\r\n\t\t\t\t          <h1 className=\"h3 mb-3 font-weight-normal\">Registration Form</h1>\r\n\t\t\t\t          <div className=\"form-group\">\r\n\t\t\t\t\t          <label className=\"sr-only\">Username</label>\r\n\t\t\t\t\t          <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\" placeholder=\"Username\" required  onChange={this.onChange} />\r\n\t\t\t\t          </div>\r\n\t\t\t\t          <div className=\"form-group\">\r\n\t\t\t\t\t          <label className=\"sr-only\">Email</label>\r\n\t\t\t\t\t          <input type=\"email\" id=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Email Address\" required  onChange={this.onChange} />\r\n\t\t\t\t          </div>\t          \r\n\t\t\t\t          <div className=\"form-group\">\t          \r\n\t\t\t\t\t          <label className=\"sr-only\">Password</label>\r\n\t\t\t\t\t          <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" placeholder=\"Password\" required  onChange={this.onChange} />\r\n\t\t\t\t          </div>\r\n\t\t\t\t          <div className=\"form-group\">\t          \r\n\t\t\t\t\t          <label className=\"sr-only\">Confirm Password</label>\r\n\t\t\t\t\t          <input type=\"password\"  id=\"cpassword\" name=\"cpassword\" className=\"form-control\" placeholder=\"Confirm Password\" required  onChange={this.onChange} />\r\n\t\t\t\t          </div>\r\n\t\t\t\t          <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\" onClick={this.register}>Submit</button><br />\r\n\r\n\t\t\t\t        </div>\r\n\r\n\t\t\t        </div>\r\n\t\t\t      </div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from 'react';\r\n\r\nimport Header from './Header';\r\nimport {PostData} from '../services/PostData';\r\nimport HeroComicSeries from './HeroComicSeries';\r\n\r\nclass HeroComicDetails extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          userData: null,\r\n          isLoggedIn: false,\r\n          isLoaded: false,\r\n          characterComics:[],\r\n          selectedComic:null,\r\n          redirectToSeries:false\r\n      }\r\n\r\n  }\r\n\r\n  componentWillMount(props){\r\n      if(sessionStorage.getItem('userData')){\r\n        this.setState({\r\n                      userData: JSON.parse(sessionStorage.getItem('userData')),\r\n                      isLoggedIn: true\r\n        });\r\n      }\r\n  }\r\n  componentDidMount(){\r\n    fetch(\"https://gateway.marvel.com:443/v1/public/comics/\"+this.props.currentComicId+\"?apikey=ec74d15afc6774090a36f84ebe6d73eb&hash=039b86042f3c054f73c92b1e405821b7&ts=12345\",{\r\n        method: 'GET',\r\n          headers: new Headers({\r\n            \"Content-Type\": \"application/json\"\r\n          })\r\n      })\r\n     .then(res => res.json())\r\n    .then(json => {\r\n        this.setState({\r\n            isLoaded: true,\r\n            characterComics: json,\r\n        })\r\n    })\r\n          .catch((error) => {\r\n        console.log(error);\r\n      })\r\n\r\n  }\r\n  selectComic(comicId){\r\n        this.setState({\r\n            selectedComic: true,\r\n        })\r\n  }\r\n\r\n  backToSeriesList(comicId){\r\n        this.setState({\r\n            redirectToSeries: comicId,\r\n        })\r\n  }\r\n  \r\n\r\n  render() {\r\n      const metaData = this.state;\r\n      const { isLoaded, characterComics,redirectToSeries } = metaData;\r\n\r\n    if(this.state.redirectToSeries){\r\n      return (\r\n        <HeroComicSeries currentCharId={this.props.currentCharId} />\r\n      )\r\n    }\r\n\r\n    if(!isLoaded){\r\n        return <div>Loading..</div>\r\n    }\r\n    else{\r\n\r\n      console.log(characterComics.data.results);\r\n        return (\r\n          <div>\r\n            <Header  />  \r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <button className=\"btn btn-primary\" onClick={() => this.backToSeriesList(this.props.currentCharId)}>Back to Previous List</button>\r\n                  </div>\r\n                </div>              \r\n                      {characterComics.data.results.map(item => (\r\n                        <div className=\"row\" key={item.id}>\r\n                          <div className=\"col-4 center comic-item\">\r\n                           \r\n                              <img className=\"img-thumbnail\" src={`${item.thumbnail.path}.${item.thumbnail.extension}`} />\r\n\r\n                              <p><strong>{item.title}</strong></p>\r\n                          </div>\r\n                          <div className=\"col-8\">\r\n                              <div className=\"comic-data-container\">\r\n                                <h2>{item.title}</h2>\r\n                                <p>Issue: {item.issueNumber}</p>\r\n                                <p>Pages: {item.pageCount}</p>\r\n                                <p>Date: {new Date(item.dates[0].date).toLocaleDateString()}</p>\r\n                                <p>Price: ${item.prices[0].price}</p>\r\n                              </div>                        \r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n        \r\n                \r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n\r\n   \r\n  }\r\n}\r\n\r\nexport default HeroComicDetails;\r\n","import React, { Component } from 'react';\r\n\r\nimport Header from './Header';\r\nimport {PostData} from '../services/PostData';\r\nimport HeroComicDetails from './HeroComicDetails';\r\n\r\nclass HeroComicSeries extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          userData: null,\r\n          user_id: null,\r\n          isLoggedIn: false,\r\n          isLoaded: false,\r\n          characterComics:[],\r\n          readHistory:[],\r\n          selectedComic:null\r\n      }\r\n\r\n  }\r\n\r\n  componentWillMount(props){\r\n      if(sessionStorage.getItem('userData')){\r\n\r\n        this.setState({\r\n                      userData: JSON.parse(sessionStorage.getItem('userData')),\r\n                      isLoggedIn: true,\r\n                      user_id:JSON.parse(sessionStorage.getItem('userData')).user_id\r\n        });\r\n\r\n      }\r\n\r\n  }\r\n  componentDidMount(){\r\n    fetch(\"https://gateway.marvel.com:443/v1/public/characters/\"+this.props.currentCharId+\"/comics?apikey=ec74d15afc6774090a36f84ebe6d73eb&hash=039b86042f3c054f73c92b1e405821b7&ts=12345\",{\r\n        method: 'GET',\r\n          headers: new Headers({\r\n            \"Content-Type\": \"application/json\"\r\n          })\r\n      })\r\n     .then(res => res.json())\r\n    .then(json => {\r\n        this.setState({\r\n            isLoaded: true,\r\n            characterComics: json,\r\n        })\r\n    })\r\n          .catch((error) => {\r\n        console.log(error);\r\n      })\r\n\r\n      fetch(\"http://k9-be.sourcebuckets.com/users/getreadhistory/\" + this.state.user_id,{\r\n        method: 'POST',\r\n          headers: new Headers({\r\n            \"Content-Type\": \"application/json\"\r\n          })\r\n      })\r\n                      .then(res => res.json())\r\n                      .then(json => {\r\n                          this.setState({\r\n                              readHistory: json,\r\n                          })\r\n                      })                      \r\n                      .catch((error) => {\r\n                                            console.log(error);\r\n                                        })\r\n// console.log(this.state.readHistory,this.state.user_id);\r\n  }\r\n\r\n  selectComic(comicId){\r\n    let user_id = this.state.user_id;\r\n      fetch(\"http://k9-be.sourcebuckets.com/users/updateview/\" + user_id + '/' + comicId,{\r\n        method: 'POST',\r\n          headers: new Headers({\r\n            \"Content-Type\": \"application/json\"\r\n          })\r\n      })\r\n                      .then(res => res.json())\r\n                      .catch((error) => {\r\n                                            console.log(error);\r\n                                        })\r\n\r\n        this.setState({\r\n            selectedComic: comicId,\r\n        })\r\n  }\r\n\r\n  checkIfComicAlreadyRead(comicId){\r\n      const metaData = this.state;\r\n      const { readHistory } = metaData;\r\n\r\n      console.log(readHistory.readhistory,comicId);\r\n\r\n      let history = readHistory.readhistory;\r\n      for(var i = 0 ; i< history.length; i++)\r\n      {     \r\n \r\n          if(history[i].comic_id== comicId){\r\n             \r\n             return true;\r\n\r\n          }\r\n      }      \r\n     \r\n  }\r\n\r\n  render() {\r\n      const metaData = this.state;\r\n      const { isLoaded, characterComics, readHistory } = metaData;\r\n\r\n    if(this.state.selectedComic != null){\r\n      return (\r\n        <HeroComicDetails currentComicId={this.state.selectedComic}  currentCharId={this.props.currentCharId} />\r\n      )\r\n    }\r\n\r\n    if(!isLoaded){\r\n        return <div>Loading..</div>\r\n    }\r\n    else{\r\n\r\n     \r\n        return (\r\n          <div>\r\n            <Header  />  \r\n\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <a href=\"/herolist\" className=\"btn btn-primary\">Back to Character List</a><br />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n\r\n                      {characterComics.data.results.map(item => (\r\n                        <div className=\"col-3 center comic-item\" key={item.id}>\r\n                          {!this.checkIfComicAlreadyRead(item.id)?<div className=\"tag\">New</div>:<div></div>}\r\n                                                   \r\n                            <img className=\"img-thumbnail\" src={`${item.thumbnail.path}.${item.thumbnail.extension}`} />\r\n\r\n                            <p><strong>{item.title}</strong></p>\r\n                          <button className=\"btn btn-primary\" onClick={() => this.selectComic(item.id)}>View Comic Details</button>\r\n                        </div>\r\n                      ))}\r\n        \r\n              </div>  \r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n\r\n   \r\n  }\r\n}\r\n\r\nexport default HeroComicSeries;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Header from './Header';\r\nimport {PostData} from '../services/PostData';\r\nimport HeroComicSeries from './HeroComicSeries';\r\n\r\nclass HeroList extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          userData: null,\r\n          isLoggedIn: false,\r\n          isLoaded: false,\r\n          characterItems:[],\r\n          selectedChar:null\r\n      }\r\n\r\n  }\r\n\r\n  componentWillMount(props){\r\n      if(sessionStorage.getItem('userData')){\r\n        this.setState({\r\n                      userData: JSON.parse(sessionStorage.getItem('userData')),\r\n                      isLoggedIn: true\r\n        });\r\n      }\r\n  }\r\n  componentDidMount(){\r\n    fetch(\"http://k9-be.sourcebuckets.com/users/getcharacters\",{\r\n        method: 'POST',\r\n          headers: new Headers({\r\n            \"Content-Type\": \"application/json\"\r\n          })\r\n      })\r\n     .then(res => res.json())\r\n    .then(json => {\r\n        this.setState({\r\n            isLoaded: true,\r\n            characterItems: json,\r\n        })\r\n    })\r\n          .catch((error) => {\r\n        console.log(error);\r\n      })\r\n\r\n  }\r\n\r\n  selectCharacter(charId){\r\n        this.setState({\r\n            selectedChar: charId,\r\n        })\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    const metaData = this.state;\r\n    const { isLoaded, characterItems } = metaData;\r\n\r\n    if(!this.state.isLoggedIn){\r\n      return (<Redirect to={'/'}/>);\r\n    }\r\n\r\n\r\n    if(this.state.selectedChar != null){\r\n      return (\r\n        <HeroComicSeries currentCharId={this.state.selectedChar} />\r\n      )\r\n    }\r\n\r\n    if(!isLoaded){\r\n        return <div>Loading..</div>\r\n    }\r\n    else{\r\n      return (\r\n       \r\n        <div>\r\n          <Header  />      \r\n          <div className=\"container\">\r\n          \t<div className=\"row\">\r\n          \t\t\r\n                  <div className=\"col\">\r\n                    <h1>Select Charcater</h1>\r\n                  </div>\r\n              </div>\r\n              <div className=\"row\">    \r\n                    {characterItems.characters.map(item => (\r\n                      <div className=\"col center\" key={item.id}>\r\n                       \r\n                          <img className=\"img-thumbnail\" src={`${item.char_thumbnail}`} />\r\n\r\n                          <p><strong>{item.char_name}</strong></p>\r\n                        <button className=\"btn btn-primary\" onClick={() => this.selectCharacter(item.char_id)}>View Comic Series</button>\r\n                      </div>\r\n                    ))}\r\n      \r\n\r\n\r\n          \t\r\n          \t</div>\t\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default HeroList;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport Home from '../components/Home';\r\nimport Register from '../components/Register';\r\nimport HeroList from '../components/HeroList';\r\n\r\n\r\nexport default () => (\r\n\t<BrowserRouter>\r\n\r\n\t\t<Switch>\r\n\t\t\t<Route path=\"/\" exact component={ Home } />\r\n\t\t\t<Route path=\"/register\" exact component={ Register } />\r\n\t\t\t<Route path=\"/login\"  exact component={ Home } />\t\t\t\t\r\n\t\t\t<Route path=\"/herolist\" exact component={ HeroList } />\t\t\t\t\r\n\t\r\n\r\n\t\t</Switch>\r\n\t</BrowserRouter>\r\n)\r\n\r\n\r\n\t\t\t// <Route path=\"/herolist\" \r\n\t\t\t// \t\texact render={() =>\r\n\t\t\t// \t\t\tloggedIn ? (\r\n\t\t\t// \t\t\t\t\t<HeroList/>\r\n\t\t\t// \t\t\t\t) : (\r\n\t\t\t// \t\t\t\t\t<Redirect to={{pathname: '/login'}} />\r\n\t\t\t// \t\t\t\t)\r\n\t\t\t// \t\t}\r\n\t\t\t//  />\t","import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nimport Routes from './routes/Routes';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n          userData: null,\r\n          isLoggedIn: false\r\n    \r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <Routes />\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n  handleSelection(index) {\r\n    this.setState({\r\n      selected: this.state.selected.concat(index)\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}